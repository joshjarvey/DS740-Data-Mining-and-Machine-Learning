install.packages("ISLR")
require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
library(ISLR)
data("Auto")
library(ISLR)
data("Auto")
head(Auto)
View(Auto)
weight.std = scale(Auto$weight)
weight.std = scale(Auto$weight)
year.std = scale(Auto$year)
View(year.std)
View(weight.std)
write.csv(cbind(weight.std,year.std), "C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/auto2.csv")
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
training.x = Auto[,train]
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
training.x = Auto[,training]
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
training.x = Auto[training]
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
training.x = Auto[training,]
View(training.x)
set.seed(1, sample.kind = "Rounding")
training = sample(1:392, 256, replace = F)
training.x = Auto[training,]
validation.x = Auto[-training,]
#set seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 256
training = sample(1:392, 256, replace = F)
#create 2 new dataframes pulling training data using the training indices.
training.x = Auto[training,]
#and pulling the validation data using everything else thats left over.
validation.x = Auto[-training,]
weight.train.std = scale(training.x$weight)
year.train.std = scale(training.x$year)
#set seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 256
train = sample(1:392, 256, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = Auto[train,]
#and pulling the validation data using everything else thats left over.
valid.x = Auto[-train,]
#scale both the weight and year from the training dataset. Stored into their own variables.
weight.train.std = scale(train.x$weight)
year.train.std = scale(train.x$year)
weight.valid.std = scale(valid.x$weight,
center = attr(weight.train.std,"scaled:center"),
scale = attr(weight.train.std,"scaled:scale")
)
year.valid.std = scale(valid.x$year,
center = attr(year.train.std,"scaled:center"),
scale = attr(year.train.std,"scaled:scale")
)
#set seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 256
train = sample(1:392, 256, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = Auto[train,]
#and pulling the validation data using everything else thats left over.
valid.x = Auto[-train,]
#scale both the weight and year from the training dataset. Stored into their own variables.
weight.train.std = scale(train.x$weight)
year.train.std = scale(train.x$year)
#scale the weight variable in the VALID dataset this time, but also make sure to use the same parameters for center/scale from the test set.
weight.valid.std = scale(valid.x$weight,
center = attr(weight.train.std,"scaled:center"),
scale = attr(weight.train.std,"scaled:scale")
)
#scale the year variable in the VALID dataset this time, but also make sure to use the same parameters for center/scale from the test set.
year.valid.std = scale(valid.x$year,
center = attr(year.train.std,"scaled:center"),
scale = attr(year.train.std,"scaled:scale")
)
library(FNN)
require(mosaic)   # Load additional packages here
# Some customization.  You can alter or delete as desired (if you know what you are doing).
trellis.par.set(theme=theme.mosaic()) # change default color scheme for lattice
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(ISLR)
data("Auto")
head(Auto)
# create new scaled variables of weight and year using the scale() function.
weight.std = scale(Auto$weight)
year.std = scale(Auto$year)
#bind the two variables together into a matrix. Write out to csv called auto2.
write.csv(cbind(weight.std,year.std), "C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/auto2.csv")
#set seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 256
train = sample(1:392, 256, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = Auto[train,]
#and pulling the validation data using everything else thats left over.
valid.x = Auto[-train,]
#scale both the weight and year from the training dataset. Stored into their own variables.
weight.train.std = scale(train.x$weight)
year.train.std = scale(train.x$year)
#scale the weight variable in the VALID dataset this time, but also make sure to use the same parameters for center/scale from the test set.
weight.valid.std = scale(valid.x$weight,
center = attr(weight.train.std,"scaled:center"),
scale = attr(weight.train.std,"scaled:scale")
)
#scale the year variable in the VALID dataset this time, but also make sure to use the same parameters for center/scale from the test set.
year.valid.std = scale(valid.x$year,
center = attr(year.train.std,"scaled:center"),
scale = attr(year.train.std,"scaled:scale")
)
View(train.x)
K = seq(1:20)
library(FNN)
predictions = knn.reg(train.x,valid.x,Auto$mpg[train], k=1)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto$mpg[train], k=1)
View(train.x)
View(Auto)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto$mpg[train,], k=1)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto$mpg[,train], k=1)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto[train]$mpg, k=1)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto$mpg, k=1)
library(FNN)
predictions = knn.reg(train.x,valid.x,Auto$mpg[train], k=1)
library(FNN)
predictions = knn.reg(train.x$mpg,valid.x$mpg,Auto$mpg[train], k=1)
Auto$mpg[train]
library(readr)
library(readr)
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
View(income)
View(income)
library(readr)
#reading in the census data.
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
income["Sex01"] = ifelse(income$Sex == " Male",0,1)
View(income)
library(readr)
#reading in the census data.
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
income["Sex01"] = ifelse(income$Sex == " Female",0,1)
library(readr)
#reading in the census data.
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
income["Sex01"] = ifelse(income$Sex == "Female",0,1)
View(income)
library(readr)
#reading in the census data.
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
income["Sex01"] = ifelse(income$Sex == "Male",0,1)
set.seed(1, sample.kind = "Rounding")
library(readr)
#reading in the census data. readr takes care of the extra spacing
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
#create a new column called Sex01.
income["Sex01"] = ifelse(income$Sex == "Male",0,1)
set.seed(1, sample.kind = "Rounding")
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = income[train,]
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = income[train,]
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = income[train,]
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
train.x.std = cbind(Educ.train.std,Age.train.std,train.x$Sex01)
View(train.x.std)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create 2 new dataframes pulling training data using the training indices.
train.x = income[train,]
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
train.x.std = cbind(Educ.train.std,Age.train.std,train.x$Sex01)
colnames(train.x.std) = c("Educ.std","Age.std","Sex01")
View(train.x.std)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = cbind(Educ.train.std,Age.train.std,train.x$Sex01)
colnames(train.x.std) = c("Educ.std","Age.std","Sex01")
#create a new dataframe pulling training data using the training indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(train.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
Age.valid.std = scale(train.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from training as well
valid.x.std = cbind(Educ.valid.std,Age.valid.std,valid.x$Sex01)
colnames(valid.x.std) = c("Educ.std","Age.std","Sex01")
View(train.x.std)
View(valid.x.std)
predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
predictions = knn(train.x,valid.x,income$Income[train], k=25)
predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
View(train.x)
View(income)
summary(income)
#predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
View(income)
library(readr)
#reading in the census data. readr takes care of the extra spacing
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
#create a new column called Sex01.
income["Sex01"] = ifelse(income$Sex == "Male",0,1)
income["income01"] = ifelse(income$Income == ">50k",1,0)
View(income)
library(readr)
#reading in the census data. readr takes care of the extra spacing
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
#create a new column called Sex01.
income["Sex01"] = ifelse(income$Sex == "Male",0,1)
income["income01"] = ifelse(income$Income == ">50K",1,0)
View(income)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = cbind(Educ.train.std,Age.train.std,train.x$Sex01)
colnames(train.x.std) = c("Educ.std","Age.std","Sex01")
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(train.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(train.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = cbind(Educ.valid.std,Age.valid.std,valid.x$Sex01)
colnames(valid.x.std) = c("Educ.std","Age.std","Sex01")
summary(income)
#predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
library(readr)
#reading in the census data. readr takes care of the extra spacing
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
#create a new column called Sex01.
income["Sex01"] = ifelse(income$Sex == "Male",0,1)
income["income01"] = as.factor(ifelse(income$Income == ">50K",1,0))
View(income)
summary(income)
#predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
library(readr)
#reading in the census data. readr takes care of the extra spacing
income = read_csv("C:/Users/joshj/Documents/DS740-Data Mining and Machine Learning/Homework/Week 1/Census_income.csv")
#create a new column called Sex01.
income["Sex01"] = as.factor(ifelse(income$Sex == "Male",0,1))
income["income01"] = as.factor(ifelse(income$Income == ">50K",1,0))
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = cbind(Educ.train.std,Age.train.std,train.x$Sex01)
colnames(train.x.std) = c("Educ.std","Age.std","Sex01")
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(train.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(train.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = cbind(Educ.valid.std,Age.valid.std,valid.x$Sex01)
colnames(valid.x.std) = c("Educ.std","Age.std","Sex01")
summary(income)
#predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = data.frame(Educ.train.std,Age.train.std,train.x$Sex01)
#colnames(train.x.std) = c("Educ.std","Age.std","Sex01")
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(train.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(train.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = cbind(Educ.valid.std,Age.valid.std,valid.x$Sex01)
colnames(valid.x.std) = c("Educ.std","Age.std","Sex01")
View(train.x.std)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = data.frame(Educ.train.std,Age.train.std,train.x$Sex01)
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(train.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(train.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = data.frame(Educ.valid.std,Age.valid.std,valid.x$Sex01)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = data.frame(Educ.train.std,Age.train.std,train.x$Sex01)
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(valid.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(valid.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = data.frame(Educ.valid.std,Age.valid.std,valid.x$Sex01)
predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
View(train.x.std)
View(valid.x.std)
View(train.x)
#seeting seed for reproducability
set.seed(1, sample.kind = "Rounding")
#create a list of indices for training - 20000
train = sample(1:32561, 20000, replace = F)
#create a new dataframe pulling training data using the training indices.
train.x = income[train,]
#standardize the educYears and Age variables
Educ.train.std = scale(train.x$EducYears)
Age.train.std = scale(train.x$Age)
#combine these standardized values from the training set, with the Sex01 values from training as well
train.x.std = data.frame(Educ.train.std,Age.train.std,train.x$Sex01)
#create a new dataframe pulling validation data using the remaining indices.
valid.x = income[-train,]
#standardize the educYears and Age variables, but using the same mean and std as the training set.
Educ.valid.std = scale(valid.x$EducYears,
center = attr(Educ.train.std,"scaled:center"),
scale = attr(Educ.train.std,"scaled:scale")
)
#standarize the age variable
Age.valid.std = scale(valid.x$Age,
center = attr(Age.train.std,"scaled:center"),
scale = attr(Age.train.std,"scaled:scale")
)
#combine these standardized values from the training set, with the Sex01 values from the remaining indices
valid.x.std = data.frame(Educ.valid.std,Age.valid.std,valid.x$Sex01)
predictions = class::knn(train.x,valid.x,income$Income[train], k=25)
predictions = class::knn(train.x.std,valid.x.std,income$Income[train], k=25)
predictions = class::knn(train.x.std,valid.x.std,income$Income[train], k=25)
predictions = class::knn(train.x.std,valid.x.std,income$Income[train], k=25)
table(predictions,income$Income[-train])
(690+1806)/ (8839+690+1806+1226)
1806/(1806+1226)
