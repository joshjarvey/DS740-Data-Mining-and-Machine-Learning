library(ISLR)
data("OJ")
force(OJ)
library(ISLR)
data("OJ")
library(nnet)
library(ISLR);library(nnet)
data("OJ")
force(OJ)
#load libraries and dataset.
library(ISLR)
library(nnet)
data("OJ")
#fit the model.
fit = nnet(Purchase~LoyalCH+SalePriceMM+PriceDiff, data = OJ, size = 1)
#load libraries and dataset.
library(ISLR)
library(nnet)
data("OJ")
set.seed(10, sample.kind = "Rounding")
#fit the model.
fit = nnet(Purchase~LoyalCH+SalePriceMM+PriceDiff, data = OJ, size = 1)
library(NeuralNetTools)
library(NeuralNetTools)
plotnet(fit)
fit$fitted.values[1]
fit
fit
summary(fit)
View(OJ)
OJ[1,c("LoyalCH","SalePriceMM","PriceDiff")]
-1.63+ 0.5*4.22 + 1.99*-0.52 + 0.24*2.39
inputH1 = -1.63+ 0.5*4.22 + 1.99*-0.52 + 0.24*2.39
outputH1 = 1 / (1+exp(inputH1))
outputH1
table(fit$fitted.values,OJ$Purchase)
predClass = ifelse(fit$fitted.values > 0.50, "MM", "CH")
predClass = ifelse(fit$fitted.values > 0.50, "MM", "CH")
table(predClass,OJ$Purchase)
fit$fitted.values > 0.50
fit$fitted.values
View(OJ)
table(predClass,OJ$Purchase)
(86+96) / (567+86+96+321)
predClass = ifelse(fit$fitted.values > 0.50, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
View(predClass)
predClass = ifelse(fit$fitted.values > 0.50, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
cbind(predClass,fit$fitted.values)[1:50,]
predClass = ifelse(fit$fitted.values > 0.90, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
cbind(predClass,fit$fitted.values)[1:50,]
predClass = ifelse(fit$fitted.values > 0.90, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
cbind(predClass,fit$fitted.values)[1:150,]
View(predClass)
View(OJ)
predClass = ifelse(fit$fitted.values > 0.90, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
cbind(predClass,fit$fitted.values)[950:1000,]
table(predClass,OJ$Purchase)
length(is.na(predClass))
is.na(predClass)
count(is.na(predClass))
which(is.na(predClass))
predClass = ifelse(fit$fitted.values > 0.90, "MM", ifelse(fit$fitted.values < 0.10, "CH",NA))
cbind(predClass,fit$fitted.values)[950:1000,]
length(which(is.na(predClass)))
table(predClass,OJ$Purchase)
603-1070
603-1070
table(predClass,OJ$Purchase)
603-1070
sum(table(predClass,OJ$Purchase))
table(predClass,OJ$Purchase)
predClass
OJ$Purchase
table(predClass,OJ$Purchase)
(9+14)/(9+14+351+93)
is.na(predClass)
which(is.na(predClass))
length(which(is.na(predClass)))
lekprofile(fit)
library(ISLR); data("Hitters")
force(Hitters)
View(Hitters)
library(ISLR);na.omit(data("Hitters"))
force(Hitters)
View(Hitters)
na.omit(data("Hitters"))
Hitters = na.omit(Hitters)
View(Hitters)
Hitters$League01 = ifelse(Hitters$League == "A",0,1)
Hitters$Division01 = ifelse(Hitters$Division == "E",0,1)
Hitters$NewLeague01 = ifelse(Hitters$NewLeague == "A",0,1)
Hitters = Hitters[,-c(14,15,20)]
n = nrow(OJ)
n = nrow(OJ)
k = 10
groups = c(rep(1:k,floor(n/k)),1:(n-floor(n/k)*k))
groups
decayRate = seq(.1, 3, by = .1)
decayRate
misclassError = matrix( , nr = k, nc = length(decay))
misclassError = matrix( , nr = k, nc = length(decayRate))
View(misclassError)
#load libraries and dataset.
library(ISLR)
library(nnet)
data("OJ")
force(OJ)
View(OJ)
x1 = c(-1,-2,-3,2,3,1)
x2 = c(1,2,1,-1,-1,-2)
x3 = c(-2,5,4,-1,-3,-3)
toydata2 = data.frame(x1,x2,x3)
View(toydata2)
x1 = c(-1,-2,-3,2,3,1)
x2 = c(1,2,1,-1,-1,-2)
x3 = c(-2,5,4,-1,-3,-3)
toydata2 = data.frame(x1,x2,x3)
rm(x1,x2,x3)
x2 = c(1,2,1,-1,-1,-2)
x3 = c(-2,5,4,-1,-3,-3)
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2,
x3)
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
toydata2 = data.frame(x1=c(-1,-2,-3,2,3,1),
x2=c(1,2,1,-1,-1,-2),
x3=c(-2,5,4,-1,-3,-3))
pca1 = prcomp(toydata2,center = F, scale = F)
View(pca1)
pca1$rotation
summary(pca1)
pca1$x
pca1$rotation
pca1$x
library(MASS)
x = UScereal[1:7,c(2:10)]
x.scale = scale(x)
View(x)
View(x.scale)
x.scale.dist = dist(x.scale,method = "euclidean")
hc.complete = hclust(x.scale.dist, method = "complete")
View(hc.complete)
plot(hc.complete)
nh.cluser = kmeans(x.scale, nclust)$cluster
set.seed(12, sample.kind = "Rounding")
nclust = 5
nh.cluser = kmeans(x.scale, nclust)$cluster
nh.cluser
set.seed(12, sample.kind = "Rounding")
nclust = 2
nh.cluser = kmeans(x.scale, nclust)$cluster
nh.cluser
#create non-hierachical clustering with kmeans. Check
set.seed(12, sample.kind = "Rounding")
nclust = 2
kmeans(x.scale, nclust)$cluster
set.seed(12, sample.kind = "Rounding")
kmeans(x.scale, nclust)$cluster
pca2 = prcomp(x,center = T,scale = T)
summary(pca2)
